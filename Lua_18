
Lua协同程序------coroutine

协同程序与线程差不多，也就是一条执行序列，拥有自己独立的栈，局部变量和指令指针，同时又和其他协同程序共享全局全局变量和其他大部分东西。

协同和线程差别：
    1 多个线程可以同时运行，也就是说同一时刻可以有多个线程同时在跑
    2 多个协程不能同时跑，也就是说同一时刻只能运行一个（！！！）协同程序
    
    
    
Lua将所有关于协程的函数封装在一个名为coroutine的table，有四种状态：1---运行  2---挂起   3---死亡  4---正常状态

coroutine.create  coroutine.yield,coroutine.resume详解：

create 创建一个协同程序，并返回该协同程序，参数只有一个，也就是回调函数，用以告诉协同程序执行的内容，创建的协同程序处于挂起状态（注意是挂起状态！！），
需要调用resume来唤醒，才能正常运行起来！

yield  挂起一个协同程序，与resume组合。使一个协同程序从运行状态变为挂起状态！

resume:将挂起状态的协程唤醒。用于启动或者再启动一个协同程序的执行。

例如：
co = coroutine.create(
 function () 
    print("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT") 
 end 
 )
 
 coroutine.resume(co) 
 
 
 
