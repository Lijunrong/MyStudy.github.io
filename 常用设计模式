1 观察者模式：
它将对象与对象之间创建关联关系，当其中一个对象发生变化，其它的对象能及时知道，并做出相应处理
举例子：如有A,B,C,D四个对象，其中，B,C,D都想知道A时刻发生了什么，对A进行了观察，当A发生了任何变化，B,C,D都能马上知道，并做出相应处理，这就是观察者模式
应用：比如本地广播事件：观察者注册监听器--》被观察者派发广播--》观察者收到广播，并处理；
UI控件管理类：当我们的GUI控件都使用了观察者模式后，用户的任何操作，都会通知它关联的对象---UI事件机制


2 单例模式：
单例模式就是一个类有且仅有一个实例对象
单例的使用地方：例如cocos 的Director,SpriteFrameCahce,unity:SoundManager,工厂基类
Class Singleton
{
       Static MySingleton;                           // 单件对象，全局唯一的。
       Static Instance(){ return MySingleton;}       // 对外暴露接口
}


3 工厂模式：
工厂模式是为了解决解耦问题，当我们用new()去创建对象时，如果需要换类，就需要在所有new()地方去修改，非常麻烦，可以用一个接口，
根据传入的参数，去创建不同的对象，比如：根据水果类型去创建不同的水果对象：
public class FruitFactory {
  public Fruit createFruit(fruitType){
    //根据水果类型去创建不同的对象
  }
}

FruitFactory factory = new FruitFactory();
factory,createFruit("Apple");
factory.createFruit("Bananle");

适用于类型比较少的情况下，用法：cocos里面精灵创建：cc.Sprite.create(参数)；

抽象工厂模式：
抽象工厂分装一个接口，这个接口负责创建一系列相互关联的对象，用户在使用接口时不需要指定对象所属的类型，用于批量生产：例子：
如音频工厂，音频工厂又能派生出音效工厂，音乐工厂

迭代模式：用于顺序遍历集合对象，不需要知道集合对象内部实现,迭代模式是一种行为模式；具体过程：
public interface Iterator{
  public boolean hasNext();
  public Object next();
}

public interface Container {
  public Iterator getIterator()
}

public class NameClass implement Container {
  public Iterator getIterator(){
    return new NameIterator();
  }
  
  private class NameIterator implement Iterator {
    private nameList = ["a","b","c"];
    private index = 0;
    public boolean hasNext(){
      if(index==Length){
        return false;
      }
      return true;
    }
    
    public Object next(){
      if(this.hasNext()){
        return nameList[index++];
      }
      return null;
    }
  }
}


访问者模式：
有时候需要对对象结构里面的对象进行很多不同而且不关联的操作，而又不希望这些操作污染了这些对象所在的类，即可使用访问者模式
访问者模式的思路：
在被访问者对象中提供接口，接待访问者对象，然后调用访问者对象的访问接口：

例子：比如鼠标，键盘被访问这对象：


public interface ComputerPart {
   public void accept(ComputerPartVisitor computerPartVisitor);
}

public class Keyboard  implements ComputerPart {
 
   @Override
   public void accept(ComputerPartVisitor computerPartVisitor) {
      computerPartVisitor.visit(this);
   }
}


public class Mouse  implements ComputerPart {
 
   @Override
   public void accept(ComputerPartVisitor computerPartVisitor) {
      computerPartVisitor.visit(this);
   }
}



public interface ComputerPartVisitor {
   public void visit(Computer computer);
   public void visit(Mouse mouse);
   public void visit(Keyboard keyboard);
   public void visit(Monitor monitor);
}


public class ComputerPartDisplayVisitor implements ComputerPartVisitor {
 
   @Override
   public void visit(Computer computer) {
      System.out.println("Displaying Computer.");
   }
 
   @Override
   public void visit(Mouse mouse) {
      System.out.println("Displaying Mouse.");
   }
 
   @Override
   public void visit(Keyboard keyboard) {
      System.out.println("Displaying Keyboard.");
   }
 
   @Override
   public void visit(Monitor monitor) {
      System.out.println("Displaying Monitor.");
   }
}


MVC：模式：
M:model，模型，一般用于存取数据，V:View 视图，用于显示数据，Controller:控制器，用于连接模型和视图，数据有变化时，通过调用model的接口去修改Model里面的
数据，同时通知view视图，刷新数据变化。
比如装备：装备数据EquipModel，存储和修改数据，EquipController:装备控制器，监听服务端协议，发送客户端请求，同时修改EquipModel的数据，并发送本地广播给View;
EquipView:视图，装备界面，显示装备数据，通过调用EquipModel的接口获取数据，同时收到EquipController的广播，刷新界面。









