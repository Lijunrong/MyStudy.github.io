Lua之多重继承

Lua实现多重继承的方法：
   关键在于用一个函数作为__index字段，如果Lua在原来的table中找不到key，就会调用这个函数，然后在这个函数中遍历所有的基类，查找是否有该key值存在。
   定义一个特殊的函数来创建对象，该函数不放在任何基类，而是独立作为一个创建对象的方法：
   
   function createClass(...)
      local c = {}  --定义一个新的table表示一个新类
      local parents = {...} --存储所有基类的一个table
      
      setmetatable(c,{__index = function(t,k)
        return search(k,parents) --在search方法中查找所有基类有没有该key值存在，
      })
      
      c.__index = c --将c作为其实例的原表
      
      function c:new(o) --为这个新类定义一个新的构造函数
        o = o or {}
        setmetatable(o,c)
        return o
      end
      return c --返回新类
   end
   
   假设有基类Acount，和Namd，要创建一个新类NameAcount同时继承Account和Named,那么只需调用createClass：
   
   NameAcount = createClass(Acount,Namd)
   
   实例化新类NameAcount:
   account = NameAcount:new({})
   

