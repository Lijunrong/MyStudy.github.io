在游戏功能系统开发过程中，经常会做遇到一些烦人的红点需求，比如一个装备锻造功能系统，可能就有几个页签，比如强化，魔化等，洗练等，然后每个页签当满足可以操作
的条件时候，就要有烦人的红点提示，而且对于整个功能系统而言，只要存在一个页签有红点，那么功能系统的入口icon也要有红点提示，在这里，就有一个层级关系，子层
的红点会影响上层红点的状态，不过，上层的红底不会影响子层的红点状态，也就是说，红点状态的改变只会是向上传递，因为上层红点状态的改变是因为子层红点发生变化。

最外层的红点有几个页签红点作为子节点，几个页签子节点有一个共同的父节点红点，所以一个红点结构，要记录其父节点红点，以及子节点红点列表。除此之外，红点自身
的状态，名字（我们可以给红点对象命名，以此作为键值），当然还要有一个回调函数，回调函数在红点状态发生改变时调用，可以在回调函数里面广播一条信息，给监听的
界面，然后做相应的隐藏或者显示处理。综上所述，一个红点数据结构要有以下数据：1自身的名字（键值）2自身的状态（显示与否），3回调函数  4 父节点红点的名字
5 子节点红点列表，如下：（lua语言开发）

红点数据结构基类：

local RedPointBase = class("RedPointBase")

funtion RedPointBase:ctor(args)
  self.name_ = args.name ----自身名字
  self.state = args.state -----自身状态
  self.func  = args.func ---自身回调函数
  self.rootname_ = args.rootname --父节点红点
  self.childList = {}--子节点红点列表，保存子节点
end

returen RedPointBase


定义好了数据结构，接下来就是红点操作的逻辑，无非就是增删改查，增---创建红点及其父节点（如果有父节点红点），删----删除自身红点，如果有父节点，将父节点的
子节点置空，如果有子节点，将子节点列表清空。改------就是提供外部接口改变红点的状态（如果有父节点，看看父节点状态是否要同步修改），通过名字索引；查-----
查找某个红点的状态，也是通过名字索引

红点操作类：
local RedPointBase = require("RedPointBase")
local RedPoint = class("RedPoint")
