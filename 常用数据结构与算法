排序算法：
1 冒泡排序：两两比较，每一趟比较，将较小者升上去，第一次比较空间为0-（N-1），最后一次比较为0-1,时间复杂度为O(N*N)

核心算法：
int []a = [6,5 8,1,0,11];
int temp = 0;
for(int i =0;i<length-1;i++){  //总共length元素，所以比较length趟
  for (int j = 0;j<length - i -1;j++){   //每一趟比较次数为length -i次
    if（a[j]>a[j+1]）{
       temp = a[j];
       a[j] = a[j+1];
       a[j+1] = temp;
    }
  }
}

经过每一趟比较，把最大值沉底，每趟比较次数L-i-1，因为i从0开始，所以要减去1，当i=0时，比较次数就是L-1; 最好的情况：0次 即序列是有序的，最坏的情况：逆序，次数 n*(n-1)/2;

2 选择排序（O（N*N））：
每趟比较，找到最小的值，然后跟每趟第一个元素交换位置，如：第一趟，比较N个数，找到最小值跟第一个交换位置，第二趟，从剩下的N-1个数找到最小值，并与第二个数交换位置，
第N-1趟时，剩下两个数进行比较，较小的跟第N-1个交换位置：算法位置：
int []a = [6,5,8,1,0,11];
int min = 0;
for(int i=0;i<L;i++){
  min = i;
  for(int j=i+1;j<l;J++){
    if(a[j]<a[min]){
      min = j;
    }
  }
  
  if(min!=i){
    int temp = a[min];
    a[min] = a[i];
    temp = a[min];
  }
}

3 插入排序:就是未排序的数据，在已排序的序列中找到对应位置插入，对应位置：就是第一个比当前元素小的元素位置后面，比如序列 3 5，插入元素4，那么4的位置就在3的后面，5的前面
算法：
for(int i = 0;i<L;i++){
  for(int j= i;j>0;j--){
    if(a[j]<a[j-1]){
       int temp = a[j];
       a[j] = a[j-1];
       temp = a[j];
    }else{
      break;
    }
  }
}

插入排序：
最好的情况，次数是n-1,序列有序，最坏的情况，序列逆序，次数:1+2+3...+n-1 = n*(n-1)/2，平均次数是最差的一半，所以时间复杂度为o(n*n)；



O（N*logN）算法：归并排序，快速排序，堆排序，希尔排序
快速排序：从待排序的序列中任取一个元素作为key，经过一段排序后，把所有小于key的元素放在key的左边，所有大于key的元素放到了右边，将序列分成了两个字表，最后将key值放在分界处的位置上
然后，分别对左右子表进行重复操作，直到每个字表只有一个记录时，排序完成！

void quickSort(int *arr,int begin,int end){
  int low = begin;
  int high = end;
  int key = arr[0];
  if(low>=end) {
    return;
  }
  while(low<high){
    while(low<high&&arr[high]>key){
      high--;
    }
    arr[low] = arr[high];
    while(low<high&&arr[low]<=key){
      low++;
    }
    arr[high] = arr[low];
  }
  arr[i] = key;
  quickSort(arr,begin,i-1);
  quickSort(arr,i+1,end);
}

快速排序的平均时间是：O（n*log2N），最坏的情况：O(N*N)。

归并排序：
总的平均时间复杂度为O(nlogn)
归并排序利用归并思想进行排序，采用分治策略,算法：

void merge_sort(int*data,int start,int end,int*result){
 if(end-start==2){
  if(data[start]>data[end]){ //有两个元素，进行排序
    int temp = data[start];
    data[start] = data[end];
    data[end] = temp;
  }
  return;
 }else if(end-start==1){ //只有一个元素，直接返回
   return;
 }else{ //继续拆分
    merge_sort(data,start,(end-start+1)/2+start,result);
    merge_sort(data,(end-start+1)/2+start+1,end,result);
    merge(data,start,end,result);
 } 
}

void merge(int*data,int start,int end,int*result){
  int left_index = start;
  int left_length = (end-start+1)/2 +1;
  int right_index = start + left_length;
  int result_index = start;
  while(left_index<start+ left_length &&right_index<end+1){
    if(data[left_index]<=data[right_index]){
      result[result_index++] = data[left_index];
    }else{
      result[result_index++] = data[right_index];
    }
  }
  
  while(left_index<start+left_length){
    result[result_index++] = data[left_index++];
  }
  
  while(right_index<end+1){
    result[result_index++] = data[right_index++];
  }
  
}

堆：
堆是一种特殊的完全二叉树：每个根节点都大于等于左右子节点或者根节点小于等于左右子节点，同时根节点的左右子树也是堆，平均时间复杂度O(nLogn)


堆排序步骤：
1 将序列构成一个堆，根据升序或者降序构成大顶堆，或者小顶堆；
2 将堆首元素与堆尾元素交换，使得堆尾元素成为最大值；
3 剩下的元素重新构建大顶堆，然后重新交换堆首元素与堆尾元素，如此反复。

代码:
#include<iostream>
#include<vector>
using namespace std;

//length data的长度，index第一个非叶子结点的索引
void adjust(vector<int>&data,int length,int index){
  int left_child = 2*index +1;
  int right_child = 2*index + 2;
  int max_index = index;
  if(left_child<length&&data[left_child]>data[max_index]){
    max_index = left_child;
  }else if(right_child<length&&data[right_child]>data[max_index]){
    max_index = right_child;
  }
  
  if(max_index!=index){
    swap(data[max_index],data[index]);
    adjust(data,length,max_index);
  }
}

void heapSort(vector<int>&data,int size){

  //构建大顶堆，从最后一个非叶子结点往上构建
  for(int i = size/2-1;i>=0;i--){
    adjust(data,size,i)
  }
  
  for(int i=size-1;i>=1;i--){
    swap(data[0],data[i]);//将最大元素放数组末尾
    adjust(data,i,0);//剩下为排序的重新构建堆
  }
}



希尔排序:
思路：
设置增量（步长），根据增量将序列分组，然后每一个小组进行插入排序，缩小增量，重复造作，直到增量为1了，这时候序列就是有序了

伪代码：
#define STEP 2
void XIER(){
  int insertNum = 0;//用于保存当前插入元素；
  int gap = len/STEP;
  int curIndex = 0;//保存当前索引
  while(gap){
    for(int i = gap;i<len;i++){
      curInex = i;
      insertNum = array[i];
      while(curIndex>=gap&&insertNum<array[cutIndex-gap]){
        array[curIndex] = array[cutIndex - gap];
        curIndex = curIndex - gap;
      }
      array[curIndex] = insertNum;
    }
    gap = gap/2;
  }
}

时间复杂度：O（nlogn）

普利姆算法：利用贪心策略，思路：
顶点集合是V

首先设置S = {1},只要S是V的真子集，就做如下贪心选择：

选取S中的元素i,j属于V-S,且c[i][j]是权值最小的边，那么将顶点j添加到S中，一直到S=V了
#define MAXINT 6
int c[MAXINT][MAXINT] = {}
void Prim(int length){
  int lowcost[MAXINT];
  int closest[MAXINT];
  bool s[MAXINT];
  s[0] = true;
  for(int i=1;i<length;i++){
    lowcost[i] = c[0][i];
    closest[i] = 0;
    s[i] = false;
  }
  
  for(int i=0;i<length-1;i++){
    int min = 100000;
    int j = 1;
    for(int k=1;k<length;k++){
      if(lowcost[k]<min&&!min[k]){
         min = lowcost[k];
         j = k;
      }
    }
    
    s[j] = 0;
    for(int k=1;k<length;k++){
      if(c[j][k]<mincost[k]&&!s[k]){
          mincost[k] = c[j][k];
          closest[k] = j;
      }
    }
  }
}

时间复杂度O(N*N)


迪杰斯特拉算法求最短路径：
算法核心思想：
1将顶点集合N分成两个集合，一个集合U:存储已经确定了最短路径的顶点，2集合T = N - U，表示还未确定最短路径的顶点集合
算法按各个顶点到源顶点V0的最短路径长度按照递增的次序，逐个将集合T中的顶点加入到集合U中，并且始终保持从V0到集合S中其它顶点
的路径长度始终小于等于到集合T中各顶点的路径长度。需要几个辅助的数组：
bool S[]:表示从V0到终点Vi已经确定了最短路径，初始值：都是false，S[v0]为true;
int Path[]:表示从V0到终点Vi的最短路径上顶点vi的前驱顶点，初始值：如果v0到vi有路径，则Path[i] = v0，如果没有路径，则Path[i] = -1;
int D[];表示从V0到顶点vi的最短路径长度，初始值：v0->vi边的值，
int G[][]:表示图的各边的权值

#define MAXINT 9999999
算法核心代码：
void Short_DJ(int length,int v0){
  //初始化操作
  for(int v=0;v<length;v++){
    S[v] = false;
    D[v] = G[v0][v];
    if(D[v]<MAXINT) {
      path[v] = v0;
    }else{
      Path[v] = -1;//不存在前驱节点
    }
  }
  
  s[v0] = true;
  D[v0] = 0;
  for(int v=1;v<length;v++){ //将剩下的n-1个点查找最短路径
    int min = MAXINT;
    int curIndex = v0;
    //寻找当前的最端路径，遍历n个顶点，不在S中并且路径长度小于min
    for(int w = 0;w<length;w++){
      if(!s[w]&&D[w]<min){
        min = D[w];
        curIndex = w;
      }
      
      S[curIndex] = true;
      //加入了新顶点，对第二组剩余的各个顶点而言，多了一个中转顶点，从而多了一条中转路径，所以要对第二组剩余的各个顶点的最短路径长度进行更新
      for(int n = 0;n<length;n++){
        if(!S[n]&&D[curIndex]+G[curIndex][n]<D[n]){
          D[n] = D[curIndex] + G[curIndex][n];
          Path[n] = curIndex;
        }
      }
    }
  }
}

时间复杂度：O（n*n）


A*寻路算法：
核心思路：
给每个点或者说格子加一个优先值F：F = H + G,H定义为预测值：就是当前格子到达目标点的距离值，G：定义为耗费值，就是父节点到达该节点的距离值。
思路：
1 定义一个openList数据结构，用来保存可以搜索的格子
2 定义一个closeList数据结构，用来保存已经访问过的格子
过程：
1 首先将起始点加入openList中，然后遍历openList，取出openList中F值最小的格子，此时OpenList只有起始点
2 从openList移除取出来的格子，同时加入到closeList中，
3 判断当前格子周围8个格子，是否在clostList中，如果不在，分别计算他们的F值，同时要设置他们的父节点为当前格子，同时加入openList中
4 循环遍历openList，反复执行上面的操作。

伪代码：
Vector<Point*> openList = new Vector<Point*>();
bool closeList[][];
int direction[8][2] = [[-1,0],[1,0],[0,-1],[0,1],[-1,-1],[-1,1],[1,-1],[1,1]];
typedef struct Point {
  int x=0,y=0;
  Point* father = null;
  int F = 0;
  Point(){
  
  }
  Point(int pointX,int pointY,int endX,int endY,Point* fatherPoint){
    this.x = pointX;
    this.y = pointY;
    this.F = math.abs(endX-this.x) + math.abs(endY-this.y) + math.abs(fatherPoint->x - this.x) + math.abs(fatherPoint->y - this.y);
    this.father = fatherPoint;
  }
  
}

void FindSmallestF(){
  if(openList.empty()){
    return null;
  }
  Point* curPoint = openList.front();
  int count = openList.size();
  for (int i = 0; i < count;i++)
  {
      if(openList[i].F<curPoint.F){
        curPoint = openList[i];
      }
  }
  return curPoint;
}
void fineWay(Point*startPoint,Point* endPoint){
  std::List<Point*>road;
  openList.pushback(startPoint);
  Point* parent = null;
  while(!openList.empty()){
    parent = FindSmallestF();
    openList.pop();
    clostList[parent.x][parent.y] = true;
    for(int i = 0;i<8;i++){
      int pointX = parant.x + direction[i][0];
      int pointY = parent.y + direction[i][1];
      Point* point = new Point(poinX,pointY,endPoint.x,endPoint.y,parent);
      if(!closeList[pointX][pointY]){
        openList.pushback(point);
      }
    }
  }
  
  road.push_back(Parent);
  while(true){
    Point* prePoint = parent->father;
    if(prePoint){
      road.push_back(prePoint);
    }else{
      break;
    }
  }
  return road;
}

A*算法优化思路：
1 openList使用优先队列作为容器，优先队列插入和查找元素时间复杂度是O（logN）;
2 closeList使用二维数组存储，这样访问效率高
3 使用深度限制策略，即搜索到一定的深度，还没找到元素，即终止搜索










